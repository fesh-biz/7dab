(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[25],{bfcd:function(e,t,a){"use strict";a.r(t);var n=function(){var e=this,t=e.$createElement;e._self._c;return e._m(0)},o=[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"row flex justify-center"},[a("div",{staticClass:"col-8"},[a("img",{attrs:{src:"https://cs1.terevenky.com/test/image1.jpg"}})])])}],s=(a("e6cf"),a("2ef0")),i=a.n(s),r=a("5e86"),c={name:"Index",components:{},data(){return{model:"Start val"}},created(){this.bigDataTestDeepClone()},methods:{bigDataTestDeepClone(){let e={};const t="Vuex is a state management library for Vue.js applications. It provides a centralized store that enables you to manage the state of your application in a predictable and maintainable way. Here are some of the key features of Vuex:\n\nCentralized state management: Vuex provides a single source of truth for your application's state. Instead of having multiple components manage their own state independently, you can store the state in the Vuex store and access it from any component that needs it.\n\nPredictable state changes: In Vuex, you modify the state through mutations, which are synchronous functions that receive the current state and a payload as arguments. By using mutations to update the state, you can ensure that all changes to the state are tracked in a predictable way.\n\nComputed state properties: Vuex allows you to define computed properties that are derived from the state of your application. These computed properties are cached and only re-evaluated when their dependencies change, which can improve performance.\n\nActions and async state changes: In addition to mutations, Vuex provides actions, which are asynchronous functions that can perform complex operations, such as making API calls. Actions can also commit mutations to update the state.\n\nModule system: If your application state becomes large and complex, you can organize it into modules, each with its own state, mutations, actions, and getters. This can help you manage the complexity of your application and make it easier to maintain.\n\nBy providing a centralized store and a set of rules for modifying the state, Vuex helps you manage the complexity of your application's state and make it easier to reason about. It can also improve the performance of your application by caching computed properties and optimizing state updates.";for(let a=0;a<1e4;a++)e[a]={string:t,subObj:{string:t,subObj:{string:t,id:1,subObj:{string:t,subObj:{string:t,id:1}}}}};console.time("deepClone test"),e=i.a.cloneDeep(e),console.timeEnd("deepClone test")},async vuexOrmTest(){await r["a"].insertOrUpdate({data:{id:1,title:"test",user_id:1,user:{id:1,login:"Login"}}}),await r["a"].insertOrUpdate({data:[{id:1,title:"test",user_id:1,user:{id:1,login:"Login",fetched_by:"temporary_route"}}]}),await r["a"].insertOrUpdate({data:{id:2,title:"test",user_id:2,user:{id:2,login:"Login"}}}),await r["a"].delete(2,{relations:!0}),console.log(r["a"].query().withAll().get())}}},u=c,d=a("2877"),l=Object(d["a"])(u,n,o,!1,null,null,null);t["default"]=l.exports}}]);
<?php

namespace Tests\Feature\Services;

use App\Data\Media\CreateMediaData;
use App\Data\Media\MediaRedisData;
use App\Data\Media\UploadMediaChunkData;
use App\Models\Media\Media;
use App\Models\User;
use App\Redis\Models\MediaRedis;
use App\Redis\Models\UserRedis;
use App\Redis\Repositories\MediaRedisRepository;
use App\Redis\Repositories\UserRedisRepository;
use App\Services\Media\MediaService;
use Illuminate\Http\UploadedFile;
use Tests\TestCase;

class MediaServiceTest extends TestCase
{
    protected MediaService $service;
    protected UserRedisRepository $userRedisRepo;
    protected MediaRedisRepository $mediaRedisRepo;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('db:seed');

        $this->service = app()->make(MediaService::class);
        $this->userRedisRepo = app()->make(UserRedisRepository::class);
        $this->mediaRedisRepo = app()->make(MediaRedisRepository::class);

        $this->userRedisRepo->deleteAll();
        $this->mediaRedisRepo->deleteAll();
    }

    /**
     * @test
     * @group MediaService
     */
    public function method_create()
    {
        $user = User::first();
        $this->actingAs($user);

        $data = new CreateMediaData(
            $user->id,
            'service_create.jpg',
            'image/jpeg',
            12521
        );

        /** @var Media $media */
        $media = $this->service->create($data);
        $this->assertDatabaseHas(Media::class, $data->toArray());

        /** @var MediaRedis $mediaRedis */
        $mediaRedis = $this->mediaRedisRepo->find($media->id);
        $this->assertNotNull($mediaRedis);
        $this->assertEquals($mediaRedis->id, $media->id);

        /** @var UserRedis $userRedis */
        $userRedis = $this->userRedisRepo->find($media->user_id);
        $this->assertNotNull($userRedis);
        $this->assertEquals($userRedis->id, $media->user_id);
        $this->assertTrue(in_array($media->id, $userRedis->media_ids));
    }

    /**
     * Method uploadChunk doesn't allow to upload a new chunk
     * if the size of already uploaded chunks is greater than allowed
     * @test
     * @group MediaService
     */
    public function upload_chunk_throw_sum_exception()
    {
        $mb = 1024 * 1024;
        $uploadMaxFileSize = $mb * getUploadMaxFilesize();
        $maxAllowedChunksSumSize = config('7dab.media_chunks_sum_max_size');

        $mediaId = 12;
        $data = new MediaRedisData($mediaId, 'image/jpeg');
        $mediaRedis = $this->mediaRedisRepo->create($data);

        $firstChunkSize = $uploadMaxFileSize;
        $chunksWithReachedMaxSum = [
            [
                'filename' => 'chunk1.jpg',
                'size' => $firstChunkSize
            ],
            [
                'filename' => 'chunk2.bin',
                'size' => $maxAllowedChunksSumSize - $firstChunkSize
            ]
        ];

        $mediaRedis->chunks = $chunksWithReachedMaxSum;
        $mediaRedis->save();

        $fileChunk = UploadedFile::fake()->create('test.jpeg', 100);
        $uploadData = new UploadMediaChunkData($mediaId, $fileChunk, 2, 3);

        $this->expectExceptionMessage('Max sum of all chunks has been reached');
        $this->service->uploadChunk($uploadData);
    }
}

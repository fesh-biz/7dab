<?php

namespace Tests\Feature\Redis\Services;

use App\Data\Media\MediaRedisData;
use App\Data\User\UserRedisData;
use App\Models\User;
use App\Redis\Models\MediaRedis;
use App\Redis\Models\UserRedis;
use Tests\TestCase;
use App\Redis\Services\MediaRedisService as Service;

class MediaRedisServiceTest extends TestCase
{
    protected Service $service;

    protected function setUp(): void
    {
        $this->service = app()->make(Service::class);
        $this->service->userRedisRepo->deleteAll();
        $this->service->mediaRedisRepo->deleteAll();

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     * @group MediaRedisService
     */
    public function method_create()
    {
        $user = User::first();
        $mediaId = 150;
        $this->createRedisUserMediaActingAsUser($user, $mediaId);


        /** @var UserRedis $redisUser */
        $redisUser = $this->service->userRedisRepo->find($user->id);
        /** @var MediaRedis $mediaRedis */
        $mediaRedis = $this->service->mediaRedisRepo->find($mediaId);

        $this->assertTrue($mediaRedis->id === $mediaId);

        $this->assertTrue(
            $redisUser->id === $user->id,
            'Created redis user has different id from auth user'
        );

        $this->assertTrue(
            in_array($mediaId, $redisUser->media_ids),
            'Media id not found in user redis record'
        );
    }

    /**
     * @test
     * @group MediaRedisService
     */
    public function method_create_only_adds_new_media_id_to_user_redis()
    {
        $prevMediaId = 149;
        $mediaId = 150;

        $user = User::first();
        $this->actingAs($user);

        $this->service->userRedisRepo->create(
            new UserRedisData($user->id, [$prevMediaId])
        );

        $data = new MediaRedisData($mediaId, 'image/jpeg');
        $this->service->create($data);

        /** @var UserRedis $userRedis */
        $userRedis = $this->service->userRedisRepo->find($user->id);

        $this->assertTrue(count($userRedis->media_ids) === 2);
        $this->assertTrue(in_array($prevMediaId, $userRedis->media_ids));
        $this->assertTrue(in_array($mediaId, $userRedis->media_ids));
    }

    /**
     * @test
     * @group MediaRedisService
     */
    public function method_delete()
    {
        $user = User::first();
        $mediaId = 140;

        $this->createRedisUserMediaActingAsUser($user, $mediaId);

        $this->service->delete($mediaId);

        $mediaRedis = $this->service->mediaRedisRepo->find($mediaId);
        $this->assertNull($mediaRedis);

        $userRedis = $this->service->userRedisRepo->find($user->id);
        $this->assertNull($userRedis);
    }

    private function createRedisUserMediaActingAsUser(User $user, int $mediaId)
    {
        $this->actingAs($user);

        $data = new MediaRedisData($mediaId, 'image/jpeg');
        $this->service->create($data);

        $mediaRedis = $this->service->mediaRedisRepo->find($mediaId);
        $this->assertNotNull($mediaId);
        $userRedis = $this->service->userRedisRepo->find($user->id);
        $this->assertNotNull($userRedis);
    }
}

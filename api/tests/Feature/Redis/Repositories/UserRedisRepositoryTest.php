<?php

namespace Tests\Feature\Redis\Repositories;

use App\Data\User\UserRedisData;
use App\Plugins\Redis\RedisException;
use App\Redis\Models\UserRedis;
use Tests\TestCase;
use \App\Redis\Repositories\UserRedisRepository as UserRepo;

class UserRedisRepositoryTest extends TestCase
{
    protected UserRepo $repo;

    protected function setUp(): void
    {
        $this->repo = app()->make(UserRepo::class);
        $this->repo->deleteAll();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     * @group UserRedisRepository
     */
    public function method_create_returns_user_redis_instance()
    {
        $data = new UserRedisData(1);

        $user = $this->repo->create($data);
        $this->assertTrue($user instanceof UserRedis);
    }

    /**
     * @test
     * @group UserRedisRepository
     */
    public function can_create_a_new_user()
    {
        $userId = 5;
        $this->createUser($userId);

        $user = $this->repo->find($userId);

        $this->assertTrue($user->id === $userId);
        $this->assertTrue(is_array($user->media_ids));
    }

    /**
     * @test
     * @group UserRedisRepository
     */
    public function can_update_a_user()
    {
        $userId = 5;
        $user = $this->createUser($userId);

        $updatedData = new UserRedisData($userId, [1, 3]);
        $this->repo->update($userId, $updatedData);

        /** @var UserRedis $user */
        $user = $this->repo->find($userId);

        $this->assertEquals($user->media_ids, $updatedData->media_ids);
    }

    /**
     * @test
     * @group UserRedisRepository
     */
    public function method_add_media_id_adds_new_media_id_to_existed_array_of_ids()
    {
        $id = 1;
        $existedMediaId = 20;

        $data = new UserRedisData($id, [$existedMediaId]);
        $this->repo->create($data);

        $additionalMediaId = 22;
        $this->repo->addMediaId($id, $additionalMediaId);

        /** @var UserRedis $user */
        $user = $this->repo->find($id);
        $this->assertTrue(in_array($existedMediaId, $user->media_ids));
        $this->assertTrue(in_array($additionalMediaId, $user->media_ids));
    }

    /**
     * @test
     * @group UserRedisRepository
     */
    public function method_delete_media_id_deletes_media_id_from_existed_array_of_ids()
    {
        $id = 1;
        $existedMediaId = 20;
        $deletedMediaId = 22;

        $data = new UserRedisData($id, [$existedMediaId, $deletedMediaId]);
        $this->repo->create($data);

        $this->repo->deleteMediaId($id, $deletedMediaId);

        /** @var UserRedis $user */
        $user = $this->repo->find($id);
        $this->assertTrue(in_array($existedMediaId, $user->media_ids));
        $this->assertNotTrue(in_array($deletedMediaId, $user->media_ids));
    }

    /**
     * @test
     * @group UserRedisRepository
     */
    public function method_delete_user_if_empty_media_ids()
    {
        $userId = 1;
        $this->createUser($userId);

        $this->repo->deleteUserIfEmptyMediaIds($userId);
        $user = $this->repo->find($userId);

        $this->assertTrue($user === null, 'User wasnt deleted when media_ids is empty');
    }

    /**
     * @test
     * @group UserRedisRepository
     */
    public function method_delete_user_if_empty_media_ids_doesnt_delete_if_not_empty_media_ids()
    {
        $userId = 1;
        $data = new UserRedisData($userId, [1, 2]);
        $this->repo->create($data);

        $this->repo->deleteUserIfEmptyMediaIds($userId);

        $user = $this->repo->find($userId);
        $this->assertNotNull($user);
    }

    private function createUser(int $id = 1): UserRedis
    {
        $data = new UserRedisData($id);
        return $this->repo->create($data);
    }
}

<?php

namespace Tests\Feature\Redis\Repositories;

use App\Data\Media\MediaRedisData;
use App\Redis\Models\MediaRedis;
use App\Redis\Repositories\MediaRedisRepository as MediaRepo;
use Tests\TestCase;

class MediaRedisRepositoryTest extends TestCase
{
    protected MediaRepo $repo;

    protected function setUp(): void
    {
        $this->repo = app()->make(MediaRepo::class);
        $this->repo->deleteAll();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     * @group MediaRedisRepository
     */
    public function incrementFailedAttempts()
    {
        $id = 1;
        $data = new MediaRedisData($id, 'image/jpeg');
        $this->repo->create($data);

        /** @var MediaRedis $media */
        $media = $this->repo->find($id);
        $this->assertTrue($media->failed_attempts === 0);

        $this->repo->incrementFailedAttempts($id);
        $media = $this->repo->find($id);
        $this->assertTrue($media->failed_attempts === 1);
    }

    /**
     * @test
     * @group MediaRedisRepository
     */
    public function getUploadedMediaChunks()
    {
        ['id' => $id, 'chunks' => $chunks] = $this->createMediaWithChunks();

        $createdChunks = $this->repo->getUploadedMediaChunks($id);

        foreach ($chunks as $index => $chunk) {
            $createdChunk = $createdChunks[$index];

            $this->assertTrue($chunk['filename'] === $createdChunk->filename);
            $this->assertTrue($chunk['size'] === $createdChunk->size);
        }
    }

    /**
     * @test
     * @group MediaRedisRepository
     */
    public function getUploadedMediaChunksSize()
    {
        ['id' => $id, 'chunksSize' => $chunksSize] = $this->createMediaWithChunks();

        $uploadedChunksSize = $this->repo->getUploadedMediaChunksSize($id);

        $this->assertEquals($chunksSize, $uploadedChunksSize);
    }

    /**
     * @test
     * @group MediaRedisRepository
     */
    public function addFileChunk()
    {
        ['id' => $id, 'chunks' => $chunks] = $this->createMediaWithChunks();

        $filename = 'new chunk';
        $size = 4234;
        $this->repo->addFileChunk($id, $filename, $size);

        /** @var MediaRedis $media */
        $media = $this->repo->find($id);
        $this->assertTrue(count($media->chunks) === count($chunks) + 1, 'Chunks amount mismatch');

        $addedChunk = $media->chunks;
        $addedChunk = end($addedChunk);
        $this->assertEquals($filename, $addedChunk->filename);
        $this->assertEquals($size, $addedChunk->size);
    }

    private function createMediaWithChunks(): array
    {
        $chunks = [];
        $chunksSize = 0;
        foreach (range(1, 10) as $id) {
            $size = $id * 10;
            $chunksSize += $size;

            $chunks[] = [
                'filename' => 'chunk' . $id,
                'size' => $size
            ];
        }

        $id = 2;
        $data = new MediaRedisData($id, 'image/jpeg', $chunks);
        $this->repo->create($data);

        return [
            'id' => $id,
            'chunks' => $chunks,
            'chunksSize' => $chunksSize
        ];
    }
}

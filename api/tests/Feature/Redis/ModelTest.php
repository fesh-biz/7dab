<?php

namespace Tests\Feature\Redis;

use App\Models\User;
use App\Plugins\Redis\Model;
use App\Plugins\Redis\RedisException;
use Carbon\Carbon;
use Tests\TestCase;

class RedisTestModel extends Model {}

class ModelTest extends TestCase
{
    protected RedisTestModel $model;

    protected function setUp(): void
    {
        $this->prepareTest();
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     * @group RedisModel
     */
    public function prepare_test_cleans_redis_properly()
    {
        RedisTestModel::create(['id' => 1]);
        RedisTestModel::create(['id' => 2]);
        RedisTestModel::create(['id' => 3]);
        RedisTestModel::create(['id' => 4]);

        $this->assertTrue(count(RedisTestModel::all()) === 4);

        $this->prepareTest();
        $this->assertTrue(count(RedisTestModel::all()) === 0);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function model_takes_redis_key_from_static_class()
    {
        $this->assertTrue($this->model->redis->getRedisKey() === 'redis_test_model', 'Redis key mismatch');
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_create_works_the_same_from_static_and_this()
    {
        $data = $this->getModelData();
        $model = $this->model->create($data);
        $this->assertDataArrayEqualsModelAttributes($data, $model);

        $this->prepareTest();

        $model = RedisTestModel::create($data);
        $this->assertDataArrayEqualsModelAttributes($data, $model);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_create_adds_created_at_and_auth_id_on_creating()
    {
        $user = User::first();
        $this->actingAs($user);

        $id = 2;
        $this->model->create(['id' => $id]);

        $model = $this->model->find($id);
        $this->assertTrue(
            $user->id === $model->auth_user_id,
            'Auth user id of created redis model mismatch to auth id'
        );

        $this->assertNotNull($model->created_at);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_update_works_the_same_from_static_and_this()
    {
        $id = 25;
        $data = $this->getModelData($id);

        RedisTestModel::create($data);
        $data['updated_value'] = 'some value';
        RedisTestModel::update($id, $data);

        $model = RedisTestModel::find($id);
        $this->assertDataArrayEqualsModelAttributes($data, $model);

        $data['updated_value'] = 'new some value';
        RedisTestModel::update($id, $data);

        $model = RedisTestModel::find($id);
        $this->assertDataArrayEqualsModelAttributes($data, $model);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_update_updates_only_passed_properties()
    {
        $id = 2;
        $data = [
            'id' => $id,
            'name' => 'John',
            'age' => 20
        ];

        $model = $this->model->create($data);
        $this->assertTrue($model->id === $data['id']);
        $this->assertTrue($model->name === $data['name']);
        $this->assertTrue($model->age === $data['age']);

        $updatedData = [
            'id' => $id,
            'name' => 'Jane'
        ];
        $this->model->update($id, $updatedData);
        $model = $this->model->find($id);
        $this->assertTrue($model->name === $updatedData['name']);
        $this->assertTrue($model->age === $data['age']);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function can_save_changed_attributes()
    {
        $id = 25;
        $data = [
            'id' => $id,
            'prop' => 'default value'
        ];

        $model = $this->model->create($data);

        $res = $this->model->find($id);
        $this->assertTrue($res->prop === $data['prop']);

        $updatedValue = 'updated value';
        $model->prop = $updatedValue;
        $model->save();


        $res = $this->model->find($id);
        $this->assertTrue($res->prop === $updatedValue);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_update_throw_exception_if_ids_not_equal()
    {
        $id = 5;
        $data = $this->getModelData($id);
        $this->model->create($data);

        $wrongId = 6;
        $data = $this->getModelData($wrongId);

        $this->expectException(RedisException::class);
        $this->expectExceptionMessage('Given id not equal to data id');
        $this->model->update($id, $data);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_update_throw_exception_if_record_with_given_id_not_found()
    {
        $wrongId = 6;
        $data = $this->getModelData($wrongId);

        $this->expectException(RedisException::class);
        $this->expectExceptionMessage("Model with \$id=$wrongId not found");
        $this->model->update($wrongId, $data);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_delete_works_from_this_and_static()
    {
        $data = $this->getModelData(26);
        $model1 = RedisTestModel::create($data);
        $data = $this->getModelData(15);
        $model2 = RedisTestModel::create($data);

        $this->assertTotalRecordsEqual(2);

        RedisTestModel::delete($model1->id);
        $this->assertTotalRecordsEqual(1);

        $model2->delete();
        $this->assertTotalRecordsEqual(0);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_delete_all_works_from_this_and_static()
    {
        $this->createMultipleModels(4);

        $this->assertTotalRecordsEqual(4);
        RedisTestModel::deleteAll();
        $this->assertTotalRecordsEqual(0);

        $this->createMultipleModels(4);

        $this->assertTotalRecordsEqual(4);
        $this->model->deleteAll();
        $this->assertTotalRecordsEqual(0);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_all_works_from_this_and_static()
    {
        $this->createMultipleModels(4);
        $all = RedisTestModel::all();

        $this->assertTrue(count($all) === 4);
        foreach ($all as $model) {
            $this->assertTrue($model instanceof Model);
        }

        $this->createMultipleModels(4);
        $all = $this->model->all();

        $this->assertTrue(count($all) === 4);
        foreach ($all as $model) {
            $this->assertTrue($model instanceof Model);
        }
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_delete_multiple_works_from_this_and_static()
    {
        $this->createMultipleModels(4);

        RedisTestModel::deleteMultiple([1, 2]);
        $this->assertTotalRecordsEqual(2);

        $this->model->deleteMultiple([3, 4]);
        $this->assertTotalRecordsEqual(0);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_get_where_works_from_this_and_static()
    {
        foreach (range(1, 6) as $id) {
            $data = ['id' => $id, 'prop' => "value $id", 'const' => 'const value'];
            RedisTestModel::create($data);
        }

        $models = RedisTestModel::getWhere('id', 6);
        $this->assertCount(1, $models);
        $models = RedisTestModel::getWhere('const', 'const value');
        $this->assertCount(6, $models);

        $models = $this->model->getWhere('id', 6);
        $this->assertCount(1, $models);
        $models = $this->model->getWhere('const', 'const value');
        $this->assertCount(6, $models);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_get_where_returns_null_if_not_found_records()
    {
        $res = RedisTestModel::getWhere('id', 1);

        $this->assertTrue($res === null);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_find_works_from_this_and_static()
    {
        $this->createMultipleModels(2);

        $model = RedisTestModel::find(1);
        $this->assertTrue(1 === $model->id);

        $model = $this->model->find(2);
        $this->assertTrue(2 === $model->id);
    }

    /**
     * @test
     * @group RedisModel
     */
    public function method_find_returns_null_if_record_wasnt_found()
    {
        $res = RedisTestModel::find(1);
        $this->assertTrue($res === null);
    }

    private function createMultipleModels(int $amount) {
        foreach(range(1, $amount) as $id) {
            RedisTestModel::create($this->getModelData($id));
        }
    }

    private function assertTotalRecordsEqual(int $number)
    {
        $this->assertTrue(count(RedisTestModel::all()) === $number);
    }

    private function assertDataArrayEqualsModelAttributes(array $data, Model $model)
    {
        foreach ($data as $key => $value) {
            $this->assertTrue($value === $model->{$key});
        }
    }

    private function getModelData(int $id = 1): array
    {
        return [
            'id' => $id,
            'first' => 'Test Value',
            'second' => 15
        ];
    }

    private function getRedisTestModel(): RedisTestModel
    {
        return app()->make(RedisTestModel::class);
    }

    private function prepareTest()
    {
        $this->model = $this->getRedisTestModel();
        $this->model->deleteAll();
    }
}
